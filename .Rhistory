library(lab4)
resid(mylm)
mylm
mylm$res.err
pred(mylm)
resid.linreg <- function(l) {
print(paste("Vector containing the residuals"))
return(print(as.vector(l$res.err)))
}
#' Available methods in 'linreg'
#'
#' The methods available for the linreg-package are described here.
#'
#'
#' @export
resid.linreg <- function(l) {
print(paste("Vector containing the residuals"))
return(print(as.vector(l$res.err)))
}
resid(mylm)
resid.linreg <- function(l) {
print(paste("Vector containing the residuals"),as.vector(l$res.err))
}
resid(mylm)
resid(mylm)
mylm$res.err
library(lab4)
resid(mylm)
mylm
library(lab4)
resid(mylm)
mylm
mylm<-test( Petal.Length ~ Species, iris)
mylm<-linreg( Petal.Length ~ Species, iris)
resid(mylm)
resid.linreg(mylm)
library(lab4)
mylm<-linreg( Petal.Length ~ Species, iris)
plot(mylm)
library(lab4)
residuals(mylm)
resid(mylm)
resid(mylm)
library(lab4)
resid(mylm)
library(lab4)
resid(mylm)[1:5]
return()
vignette(lab4)
library(lab4)
library(lab4)
vignette(lab4)
vignette('lab4')
vignette("lab4")
vignette("lab4.Rmd")
library(pandock)
library(pandoc)
install.packages("pandock")
install.packages("pandoc")
library(lab4)
vignette(package=lab4)
vignette(package="lab4")
library(lab4)
vignette(package="lab4")
vignette("lab4")
devtools::install()
vignette(package="lab4")
vignette("lab4")
devtools::build_vignettes()
vignette("lab4")
vignette(package="lab4")
devtools::install_github(build_vignettes=TRUE)
vignette('lab4')
vignette(package='lab4')
browseVignette('Lab4')
browseVignette('ab4')
browseVignettes("lab4")
browseVignettes("Lab4")
vignette([lab4])
vignette(lab4)
vignette("lab4")
devtools::build_vignettes()
vignette("lab4")
vignette(package= "lab4")
devtools::install_github(build_vignettes=TRUE)
library(lab4)
devtools::install_github(repo=getwd(),build_vignettes=TRUE,force=TRUE)
devtools::install_github(repo=paste(getwd()),build_vignettes=TRUE,force=TRUE)
devtools::install_github(repo="https://github.com/Antpe404/lab4",build_vignettes=TRUE,force=TRUE)
devtools::install_github(repo="https://github.com/Antpe404/lab4",build_vignettes=TRUE,force=TRUE,username = Emil5KS)
devtools::install_github(repo="https://github.com/Antpe404/lab4",build_vignettes=TRUE,force=TRUE,username = "Emil5KS")
devtools::install_github(repo="https://github.com/Antpe404/lab4",build_vignettes=TRUE,force=TRUE,username = "Antpe404")
devtools::install_github(repo="http://github.com/Antpe404/lab4",build_vignettes=TRUE,force=TRUE)
devtools::install_github(repo="Antpe404/http://github.com/Antpe404/lab4",build_vignettes=TRUE,force=TRUE)
devtools::install_github(repo="Antpe404/https://github.com/Antpe404/lab4",build_vignettes=TRUE,force=TRUE)
devtools::install_github(repo="Antpe404/lab4",build_vignettes=TRUE,force=TRUE)
vignette("lab4")
library(lab4)
plot(mylm)
library(lab4)
plot(mylm)
library(lab4)
plot(mylm)
element_blank()
library(lab4)
plot(mylm)
library(lab4)
plot(mylm)
library(lab4)
plot(mylm)
library(lab4)
plot(mylm)
library(lab4)
plot(mylm)
library(lab4)
plot(mylm)
library(lab4)
plot(mylm)
plot(mylm)
library(lab4)
geom_hline
library(lab4)
plot(mylm)
print(mylm)
library(lab4)
plot(mylm)
mylm
lm(Petal.Length ~ Petal.Width ,   data: iris)
lm(Petal.Length ~ Petal.Width,data= iris)
skit<-lm(Petal.Length ~ Petal.Width,data= iris)
skit$coefficients
mylm$coefficients
print(mylm)
print(mylm) == skit$coefficients
mylm$coefficients == skit$coefficients
round(mylm$coefficients,digits=2) == skit$coefficients
round(mylm$coefficients,digits=2)
round(mylm$coefficients,digits=3) == skit$coefficients
all(mylm$coefficients,digits=3 == skit$coefficients)
all(mylm$coefficients == skit$coefficients)
any(mylm$coefficients == skit$coefficients)
any(mylm$coefficients[1:2] == skit$coefficients[1:2])
any(mylm$coefficients[1] == skit$coefficients[1])
skit$coefficients[1]
mylm$coefficients[1]
mylm$coefficients[1]
as.vector(mylm$coefficients[1])
as.vector(mylm$coefficients[1]) == as.vector(skit$coefficients)
as.vector(mylm$coefficients[]) == as.vector(skit$coefficients)
as.vector(skit$coefficients)
as.vector(mylm$coefficients)
as.vector(mylm$coefficients[1]) == as.vector(skit$coefficients[1])
unlist(as.vector(mylm$coefficients[1]) == as.vector(skit$coefficients[1]))
unlist(as.vector(mylm$coefficients[1])) == as.vector(skit$coefficients[1]))
unlist(as.vector(mylm$coefficients[1])) == as.vector(skit$coefficients[1])
unlist(as.vector(mylm$coefficients[1])) == unlist(as.vector(skit$coefficients[1]))
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]))
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 100)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 75)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 50)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 40)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 30)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 20)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 9)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 8)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 7)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 6)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 5)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 4)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 3)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 2)
round(as.vector(mylm$coefficients[1])) == round(as.vector(skit$coefficients[1]),digits = 1)
for (i in c(100,75,50,40,30,20,15,14,13,12,11,10) {round(as.vector(mylm$coefficients[1]),digits =i) == round(as.vector(skit$coefficients[1]),digits = i)}
for (i in c(100,75,50,40,30,20,15,14,13,12,11,10)) {round(as.vector(mylm$coefficients[1]),digits =i) == round(as.vector(skit$coefficients[1]),digits = i)}
for (i in c(100,75,50,40,30,20,15,14,13,12,11,10)) {print(round(as.vector(mylm$coefficients[1]),digits =i) == round(as.vector(skit$coefficients[1]),digits = i))}
for (i in c(20,19,18,17,16,15,14,13,12,11,10)) {print(round(as.vector(mylm$coefficients[1]),digits =i) == round(as.vector(skit$coefficients[1]),digits = i))}
linreg("Petal.Length ~ Petal.Width")
linreg("Petal.Length ~ Petal.Width",data=iris)
linreg(Petal.Length ~ Petal.Width,data=iris)$res.err
test_that("Concarnetest1", {})
as.formula(Petal.Length ~ Petal.Width)
typeof(Petal.Length ~ Petal.Width)
class(Petal.Length ~ Petal.Width)
class(Petal.Length ~ Petal.Width) == "formula"
skit$effects
skit$rank
skit$assign
skit$qr
skit$terms
summary(skit)
summary(skit)[1]
summary(skit)[2]
summary(skit)[3]
summary(skit)[4]
unlist(summary(skit)[4])
unlist(summary(skit)[4])[5]
unlist(summary(skit)[4])[7:8]
unlist(summary(skit)[4])[5:6]
linreg<-function(formula,data){
if(is.character(formula) == TRUE){
formula <- as.formula(formula)
}
if(class(formula) != "formula"){
stop("The formula is not in the correct format")
}
if( is.data.frame == TRUE ){
data = as.matrix(data)
}
if(nrow(data)[1] < 5 )  {
stop("To few rows of data")
}
if(ncol(data)[2] < 1 )  {
stop("To few columms of data, please supply more than one row of data")
}
des.mat <- model.matrix(formula , data) #Extracts the model matrix
dep.var <- all.vars(formula)[1]         #Extracts the name of the y-variable
dep.var <- as.matrix(data[dep.var])     #Extracts the data of the y-variable
# and overwrites it with the data-colum
beta.hat <- solve( t(des.mat) %*% des.mat )  %*% t(des.mat) %*% dep.var #Calculating the beta coeffs. (X' %*% X)^-1 %*% X' %*% y
y.hat <- des.mat %*% beta.hat # Calculating the y-hat  , y_hat = X %*% beta_hat
res.err <- dep.var - y.hat  #Calculating the residuals e= y- y_hat
degree.free <- nrow(des.mat) - ncol(des.mat)  #Degrees of freedom, n - p
#OKLART OM p = b0 till b4 = 5  eller om det Ã¤r p = b1 -b4 = 4
res.var2 <-( t(res.err) %*% res.err ) / degree.free #Calculating the residual variance (e' %*% e) / df
var.hat.bhat <-diag( as.vector(res.var2) *  solve( t(des.mat) %*% des.mat )  )#Calculating
t.beta <- beta.hat / sqrt( var.hat.bhat )
my.pvalues<- (1 - pt( abs( t.beta ) ,df = degree.free) ) * 2
l<-list( coefficients = t(beta.hat) , degree.free = degree.free, res.var2 = res.var2, var.hat.bhat = var.hat.bhat,
t.beta = t.beta, my.pvalues = my.pvalues, formula = formula, dataset=deparse(substitute(data)),
data=cbind(des.mat,dep.var),y.hat=y.hat,res.err=res.err)
class(l) <- "linreg"
rownames(l$coefficients) <- ""
return(l)
}
#mylm<-test( Petal.Length ~ Species, iris)
#mylm<-test(Sepal.Length ~ Sepal.Width,data = iris)
linreg( Petal.Length ~ Species, iris)
linreg<-function(formula,data){
if(is.character(formula) == TRUE){
formula <- as.formula(formula)
}
if(class(formula) != "formula"){
stop("The formula is not in the correct format")
}
if( is.data.frame(data) == TRUE ){
data = as.matrix(data)
}
if(nrow(data)[1] < 5 )  {
stop("To few rows of data")
}
if(ncol(data)[2] < 1 )  {
stop("To few columms of data, please supply more than one row of data")
}
des.mat <- model.matrix(formula , data) #Extracts the model matrix
dep.var <- all.vars(formula)[1]         #Extracts the name of the y-variable
dep.var <- as.matrix(data[dep.var])     #Extracts the data of the y-variable
# and overwrites it with the data-colum
beta.hat <- solve( t(des.mat) %*% des.mat )  %*% t(des.mat) %*% dep.var #Calculating the beta coeffs. (X' %*% X)^-1 %*% X' %*% y
y.hat <- des.mat %*% beta.hat # Calculating the y-hat  , y_hat = X %*% beta_hat
res.err <- dep.var - y.hat  #Calculating the residuals e= y- y_hat
degree.free <- nrow(des.mat) - ncol(des.mat)  #Degrees of freedom, n - p
#OKLART OM p = b0 till b4 = 5  eller om det Ã¤r p = b1 -b4 = 4
res.var2 <-( t(res.err) %*% res.err ) / degree.free #Calculating the residual variance (e' %*% e) / df
var.hat.bhat <-diag( as.vector(res.var2) *  solve( t(des.mat) %*% des.mat )  )#Calculating
t.beta <- beta.hat / sqrt( var.hat.bhat )
my.pvalues<- (1 - pt( abs( t.beta ) ,df = degree.free) ) * 2
l<-list( coefficients = t(beta.hat) , degree.free = degree.free, res.var2 = res.var2, var.hat.bhat = var.hat.bhat,
t.beta = t.beta, my.pvalues = my.pvalues, formula = formula, dataset=deparse(substitute(data)),
data=cbind(des.mat,dep.var),y.hat=y.hat,res.err=res.err)
class(l) <- "linreg"
rownames(l$coefficients) <- ""
return(l)
}
#mylm<-test( Petal.Length ~ Species, iris)
#mylm<-test(Sepal.Length ~ Sepal.Width,data = iris)
linreg( Petal.Length ~ Species, iris)
2 < 2
2 < 3
#This flik
linreg<-function(formula,data){
if(is.character(formula) == TRUE){
formula <- as.formula(formula)
}
if(class(formula) != "formula"){
stop("The formula is not in the correct format")
}
if( is.data.frame(data) == TRUE ){
data = as.matrix(data)
}
if(nrow(data) < 5 )  {
stop("To few rows of data")
}
if( ncol(data) < 1 )  {
stop("To few columms of data, please supply more than one row of data")
}
des.mat <- model.matrix(formula , data) #Extracts the model matrix
dep.var <- all.vars(formula)[1]         #Extracts the name of the y-variable
dep.var <- as.matrix(data[dep.var])     #Extracts the data of the y-variable
# and overwrites it with the data-colum
beta.hat <- solve( t(des.mat) %*% des.mat )  %*% t(des.mat) %*% dep.var #Calculating the beta coeffs. (X' %*% X)^-1 %*% X' %*% y
y.hat <- des.mat %*% beta.hat # Calculating the y-hat  , y_hat = X %*% beta_hat
res.err <- dep.var - y.hat  #Calculating the residuals e= y- y_hat
degree.free <- nrow(des.mat) - ncol(des.mat)  #Degrees of freedom, n - p
#OKLART OM p = b0 till b4 = 5  eller om det Ã¤r p = b1 -b4 = 4
res.var2 <-( t(res.err) %*% res.err ) / degree.free #Calculating the residual variance (e' %*% e) / df
var.hat.bhat <-diag( as.vector(res.var2) *  solve( t(des.mat) %*% des.mat )  )#Calculating
t.beta <- beta.hat / sqrt( var.hat.bhat )
my.pvalues<- (1 - pt( abs( t.beta ) ,df = degree.free) ) * 2
l<-list( coefficients = t(beta.hat) , degree.free = degree.free, res.var2 = res.var2, var.hat.bhat = var.hat.bhat,
t.beta = t.beta, my.pvalues = my.pvalues, formula = formula, dataset=deparse(substitute(data)),
data=cbind(des.mat,dep.var),y.hat=y.hat,res.err=res.err)
class(l) <- "linreg"
rownames(l$coefficients) <- ""
return(l)
}
linreg( Petal.Length ~ Species, iris)
linreg<-function(formula,data){
if(is.character(formula) == TRUE){
formula <- as.formula(formula)
}
if(class(formula) != "formula"){
stop("The formula is not in the correct format")
}
if( is.matrix(data) == TRUE ){
data = as.data.frame(data)
}
if(nrow(data) < 5 )  {
stop("To few rows of data")
}
if( ncol(data) < 1 )  {
stop("To few columms of data, please supply more than one row of data")
}
des.mat <- model.matrix(formula , data) #Extracts the model matrix
dep.var <- all.vars(formula)[1]         #Extracts the name of the y-variable
dep.var <- as.matrix(data[dep.var])     #Extracts the data of the y-variable
# and overwrites it with the data-colum
beta.hat <- solve( t(des.mat) %*% des.mat )  %*% t(des.mat) %*% dep.var #Calculating the beta coeffs. (X' %*% X)^-1 %*% X' %*% y
y.hat <- des.mat %*% beta.hat # Calculating the y-hat  , y_hat = X %*% beta_hat
res.err <- dep.var - y.hat  #Calculating the residuals e= y- y_hat
degree.free <- nrow(des.mat) - ncol(des.mat)  #Degrees of freedom, n - p
#OKLART OM p = b0 till b4 = 5  eller om det Ã¤r p = b1 -b4 = 4
res.var2 <-( t(res.err) %*% res.err ) / degree.free #Calculating the residual variance (e' %*% e) / df
var.hat.bhat <-diag( as.vector(res.var2) *  solve( t(des.mat) %*% des.mat )  )#Calculating
t.beta <- beta.hat / sqrt( var.hat.bhat )
my.pvalues<- (1 - pt( abs( t.beta ) ,df = degree.free) ) * 2
l<-list( coefficients = t(beta.hat) , degree.free = degree.free, res.var2 = res.var2, var.hat.bhat = var.hat.bhat,
t.beta = t.beta, my.pvalues = my.pvalues, formula = formula, dataset=deparse(substitute(data)),
data=cbind(des.mat,dep.var),y.hat=y.hat,res.err=res.err)
class(l) <- "linreg"
rownames(l$coefficients) <- ""
return(l)
}
#mylm<-test( Petal.Length ~ Species, iris)
#mylm<-test(Sepal.Length ~ Sepal.Width,data = iris)
linreg( Petal.Length ~ Species, iris)
#skit<-test(Sepal.Length~ Petal.Width, iris)
linreg( Petal.Length ~ Petal.Length, iris)
library(lab4)
devtools::use_testthat()
library(lab4)
summary(test)
test<-lm(Petal.Width~Petal.Length,data=iris)
mylm<-linreg(Petal.Width~Petal.Length,data=iris)
summary(test)
summary(test)[4]
unlist(summary(test)[4])
unlist(summary(test)[4])[5:6]
mylm<-linreg(Petal.Width~Petal.Length,data=iris)
mylm$t.beta
round(as.vector(mylm$t.beta), 10)==round(unlist(summary(test)[4])[5:6], 10)
round(as.vector(mylm$t.beta), 10)==round(as.vector(unlist(summary(test)[4])[5:6], 10))
Du ser nyfiken ut KS!Â°
(round(as.vector(mylm$t.beta), 10)
round(as.vector(mylm$t.beta), 10)
round(unlist(summary(test)[4])[5:6], 10))
round(unlist(summary(test)[4])[5:6], 10)
round(unlist(as.vector(summary(test)[4])[5:6], 10))
round(unlist(summary(test)[4])[5:6], 10)
round(unlist(summary(test)[4])[5:6], 10)[1:2]
as.vector(round(unlist(summary(test)[4])[5:6], 10))
library(lab4)
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(lab4)
library(lab4)
??Chiliconcarne
library(lab4)
??lab4
?lab4
library(lab4)
linreg(Petal.Length~Species,iris )
plot(linreg(Petal.Length~Species,iris ))
library(lab4)
mylm
library(lab4)
mylm
library(lab4)
mylm
library(lab4)
??lab4
library(lab4)
require(xpath)
require(xpath)
install.packages(xpath)
require("xpath")
install.packages('xpath')
install.packages
install.packages("updateR")
install.package("updateR")
install.packages("updateR")
version
version
library(linreg)
library(lab4)
matrix(1:2,ncol=1)
matrix(1:10,ncol=1)
linreg(formula = mytestdata[,1] ~ mytestdata[,2], data = mytestdata)
mytestdata<-as.data.frame(matrix(1:9,ncol=2))
linreg(formula = mytestdata[,1] ~ mytestdata[,2], data = mytestdata)
mytestdata
linreg(formula = V1 ~ V2, data = mytestdata)
mytestdata<-as.data.frame(matrix(1:8,ncol=2))
linreg(formula = V1 ~ V2, data = mytestdata)
mytestdata<-as.data.frame(matrix(1:10,ncol=1))
linreg(formula = Petal.Width ~ Petal.Length, data = mytestdata)
mytestdata<-as.data.frame(matrix(1:10,ncol=1))
linreg(formula = V1 ~ V2, data = mytestdata)
?lab4
??lab4
vignette(lab4)
vignette('lab4')
print.linreg(mylm)
print(mylm)
linreg(mylm)
mylm <- linreg(formula = Petal.Width ~ Petal.Length,data = iris)
print(mylm)
print.linreg(mylm)
print.linreg(mylm)
detach("package:lab4", unload=TRUE)
library("lab4", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
print(mylm)
print.linreg(mylm)
library(lab4)
pred(mylm)
vignette('lab4')
coef(mylm)
coef.linreg(mylm)
plot.linreg(mylm)
plot(mylm)
vignette('lab4')
linreg(formula = "Petal.Width ~ Petal.Length",data = iris)
linreg(formula = Petthal.witt ~ Peta.nasan ,data = iris)
linreg(formula = Petal.Width ~ Petal.Length,data = ipasta)
mytestdata<-as.data.frame(matrix(1:10,ncol=1))
linreg(formula = V1 ~ V2, data = mytestdata)
mytestdata<-as.data.frame(matrix(1:8,ncol=2)) # Stops if to few datarows
linreg(formula = V1 ~ V2, data = mytestdata)
plot(mylm)
version
version
install.packages(xml)
install.packages(xpath)
install.packages('xpath')
install.packages(rveest)
install.packages(rvest)
install.packages('rvest')
vignette('JSON')
vignette("JSON")
library("rvest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
html(http://www.espn.com/nba/playbyplay?gameId=300617013)
html("http://www.espn.com/nba/playbyplay?gameId=300617013")
rejm<-read_html("http://www.espn.com/nba/playbyplay?gameId=300617013")
rejm
rejm[1]
rejm[[1]]
rejm[[2]]
html(rejm)
read_xmÃ¶
read_xml(rejm)
google <- read_html("http://google.com", encoding = "ISO-8859-1")
google
google %>% xml_structure()
google %>% html_nodes("div")
> rejm %>% html_nodes("
<td class="game-details">Start of the 1st Quarter</td>"
> rejm %>% html_nodes("
<td class="game-details">Start of the 1st Quarter</td>")
> rejm %>% html_nodes("td")
> rejm %<% html_nodes("td")
> rejm %>% html_nodes("td")
> rejm %>% html_nodes("tbody")
> rejm %>% xml_structure()
google <- read_html("http://google.com", encoding = "ISO-8859-1")
google %>% xml_structure()
rejm %>% xml_structure()
rejm %>% html_nodes()
rejm %>% html_nodes("div")
rejm %>% html_nodes("tr")
rejm1<-rejm %>% html_nodes("tr")
rejm1[1]
rejm1[2]
rejm1[3]
rejm1[4]
rejm1[5]
rejm1[6]
rejm1[7]
rejm1[5]
rejm1[[5]]
rejm1[[5]][3]
rejm1[[5]][Â§]
rejm1[[5]][1]
rejm1[[5]][2]
rejm1[[5]]
